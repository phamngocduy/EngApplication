@using System.Text.RegularExpressions
@model IEnumerable<String>
@{
    ViewBag.Title = "Practicing";
}
<link rel="stylesheet" type="text/css" href="~/Content/style.css" />
<hr />

<div class="row">
    <div class="col-sm-3 form-inline">
        <select class="form-control" id="voices"></select>
    </div>
    <div class="form-inline col-sm-3">
        <label for="rate">Rate</label><input type="range" min="0.5" max="2" value="1" step="0.1" id="rate">
        <div class="rate-value">1</div>
        <div class="clearfix"></div>
    </div>

    <div class="col-sm-3 form-inline">
        <button id="playButton" class="btn"><img id="play" src="~/Content/Play-icon.png" /></button>
        <button id="resumeButton" class="btn"><img id="play" src="~/Content/Pause-icon.png"></button>
        <button id="cancelButton" class="btn"><img id="play" src="~/Content/Stop-icon.png"></button>
    </div>
    <div class="form-inline col-sm-3">
        <button id="recordButton" class="btn" title="Recording" data-toggle="popover" data-trigger="hover" data-content="Click hear to begin recording" onclick="mousePressed1()"><img id="play" src="~/Content/Button-Fast-Forward-icon.png"></button>
        <button id="recordingStopButton" class="btn" title="Stop Recording" data-toggle="popover" data-trigger="hover" data-content="Click hear to stop recording" onclick="mousePressed2()"><img id="play1" src="~/Content/Stop-icon.png"></button>
        <button id="downloadButton" class="btn" title="Downloading" data-toggle="popover" data-trigger="hover" data-content="Click hear to downloading" onclick="mousePressed3()"><img id="play" src="~/Content/Network-Download-icon.png"></button>

    </div>
</div>

<div class="well">
    <div class="container">
        @foreach (var text in Model)
        {
            if (String.IsNullOrEmpty(text))
            {
                <br /><br />
            }
            else
            {
                <span class="line">
                @MvcHtmlString.Create("<!--")
                @foreach (var word in Regex.Split(text, "([a-zA-Z]+)"))
                {
                    @MvcHtmlString.Create("-->")<span class="@(Regex.IsMatch(word, "[a-zA-Z]+") ? "word" : word.Contains('.') ? "dot" : null)">@word</span>@MvcHtmlString.Create("<!--")
                }
                @MvcHtmlString.Create("-->")
                </span>
            }
        }
    </div>
</div>

<style>
    span.line:hover {
        text-decoration: underline;
    }
    span.bold {
        font-weight: bold;
    }
    span.underline {
        text-decoration: underline;
    }
    span.word {
        cursor: pointer;
    }
    span.red {
        color: red;
    }
    span.green {
        color: green;
    }
    span.blue {
        color: blue;
    }
</style>

@section Scripts {
    <script>
    $(function () {
        $('span.word').click(function () {
            $('span.bold').removeClass('bold').parent('span.line').removeClass('underline');
            $(this).addClass('bold').parent('span.line').addClass('underline');
            setContent($(this).parent('span.line').nextAll('span.line').andSelf());
        });
        setContent($('span.line'));
    });

    spanContent = [];
    textContent = [];
    function setContent(sentences) {
        spanContent = [];
        textContent = [];
        sentences.each(function () {
            var sentence = [];
            $(this).find('span.word').each(function () {
                sentence.push($(this).text().toLowerCase());
            });
            spanContent.push(this);
            textContent.push(sentence);
        })
    }

    // start coding here
    var synth = window.speechSynthesis;
    var inputForm = document.querySelector('form');
    var voiceSelect = document.querySelector('select');
    var mic, recorder, soundFile;
    var state = 0; // mousePress will increment from Record, to Stop, to Play
    var rate = document.querySelector('#rate');
    var rateValue = document.querySelector('.rate-value');
    var listVoice = ["David", "Zira", "Mark", "Chelsea", "Peter", "Sergio"];
    var voices = [];
    var isClick = true;
    var count = 1;
    var isBegin = true;
    //Get voices
    function populateVoiceList() {
        voices = synth.getVoices();
        var selectedIndex = voiceSelect.selectedIndex < 0 ? 0 : voiceSelect.selectedIndex;
        voiceSelect.innerHTML = '';
        for (i = 0, j = 0; i < voices.length; i++) {
            var isLang = false;
            if (voices[i].lang == "en-US" || voices[i].lang == "en-GB") {
                var option = document.createElement('option');
                $("#voices").val(j);
                if (voices[i].lang == "en-US") {
                    option.innerHTML = listVoice[j] + ' (' + voices[i].lang + ')';
                } else {
                    option.innerHTML = listVoice[j] + ' (' + voices[i].lang + ')';
                }

                j++;
                isLang = true;
            }
            if (voices[i].default) {
                option.innerHTML += '';
            }
            if (isLang == true) {
                option.setAttribute('data-lang', voices[i].lang);
                option.setAttribute('data-name', voices[i].name);
                option.value = j;
                voiceSelect.appendChild(option);
            }
        }
        voiceSelect.selectedIndex = selectedIndex;
    }

    populateVoiceList();
    if (speechSynthesis.onvoiceschanged !== undefined) {
        speechSynthesis.onvoiceschanged = populateVoiceList;
    }

    //Handle read here
    function speak(speakingHere) {
        if (speakingHere !== '') {
            var utterThis = new SpeechSynthesisUtterance(speakingHere);
            utterThis.onend = function (event) {
                console.log('SpeechSynthesisUtterance.onend');
                $("#resumeButton").hide();
                $("#cancelButton").hide();
                $("#playButton").show();
                isBegin = true;
            }
            utterThis.onerror = function (event) {
                console.error('SpeechSynthesisUtterance.onerror');
            }
            utterThis.onpause = function (event) {
                console.error('SpeechSynthesisUtterance.onepause');
            }
            var selectedOption = voiceSelect.selectedOptions[0].getAttribute('data-name');
            for (i = 0; i < voices.length; i++) {
                if (voices[i].name === selectedOption) {
                    utterThis.voice = voices[i];
                }
            }
            utterThis.rate = rate.value;
            synth.speak(utterThis);
        }
    }
    //Change speed value read
    rate.onchange = function () {
        rateValue.textContent = rate.value;
    }
    //
    $("#resumeButton").click(function () {
        if (isClick == true) {
            synth.pause();
            isClick = false;
        } else {
            synth.resume();
            isClick = true;
        }
    });
    $("#cancelButton").click(function () {
        if (isBegin == false) {
            synth.cancel();
            $("#resumeButton").hide();
            $("#cancelButton").hide();
            $("#playButton").show();
            isBegin = true;
        }
    });
    //////////////-Reading-Here////////////////////////
    $("#playButton").click(function (event) {
        $('.line').removeClass('blue')
        if (isBegin == true) {
            event.preventDefault();
            //Read each text in array Content
            for (let i = 0; i < spanContent.length; i++) {
                $(spanContent[i]).addClass('blue');
                speak($(spanContent[i]).text()); /// read a sentence
                $("#resumeButton").show();
                $("#cancelButton").show();
                $("#playButton").hide();
            }
            isBegin = false;
        }
    });
    //Setup mic onload
    function setup() {
        mic = new p5.AudioIn();
        mic.start();
        recorder = new p5.SoundRecorder();
        recorder.setInput(mic);
        soundFile = new p5.SoundFile();
    }
    isOnclick = false;
    function mousePressed1() {
        isOnclick = true;
        state = 0;

        if (state === 0 && mic.enabled) {
            recorder.record(soundFile);
            $("#play1").attr('src', "\Stop-icon.png");
            state++;
        }
        if (isOnclick == true) {
            $("#recordingStopButton").attr('data-content', 'Click here to stop recording!');
            $("#recordButton").attr('data-content', 'Recording!');
            isOnclick = false;
        }
    }
    //Stop record and play again
    function mousePressed2() {
        if (state === 1) {
            recorder.stop(); // stop recorder, and send the result to soundFile
            state++;
            $("#recordingStopButton").attr('data-content', 'Click here to hear your voice!');
            $("#play1").attr('src', "\Speak-2-icon.png");

        } else if (state === 2) {
            soundFile.play(); // play the result
        }
        $("#recordButton").attr('data-content', 'Click here to begin record');
    }
    //Download here
    function mousePressed3() {
        if (state === 2) {
            saveSound(soundFile, 'mySound.wav'); // save file
            $("#recordButton").attr('data-content', 'Click here to begin recording');
        }
    }
    </script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/p5.js/0.7.1/p5.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/p5.js/0.7.1/addons/p5.sound.min.js"></script>
}

