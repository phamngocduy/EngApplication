@using System.Text.RegularExpressions
@model IEnumerable<String>
@{
    ViewBag.Title = "Practicing";
}

<link rel="stylesheet" type="text/css" href="~/Content/style.css" />
<hr />

<div class="row">
    <div class="col-sm-3 form-inline">
        <select class="form-control" id="voices"></select>
        <input type="range" data-slider-min="0.5" data-slider-max="2" data-slider-value="1" data-slider-step="0.1" id="rate">
    </div>

    <div class="col-sm-3 form-inline">
        <button id="playButton" class="btn" title="Play" data-toggle="popover" data-trigger="hover" data-content="Click hear to play"><img id="play" src="~/Content/Play-icon.png" /></button>
        <button id="resumeButton" class="btn" title="Resume" data-toggle="popover" data-trigger="hover" data-content="Click hear to resume" style="display:none"><img id="play" src="~/Content/Play-icon.png" /></button>
        <button id="pauseButton" class="btn" title="Pause" data-toggle="popover" data-trigger="hover" data-content="Click hear to pause" style="display:none"><img id="play" src="~/Content/Pause-icon.png"></button>
        <button id="cancelButton" class="btn" title="Stop" data-toggle="popover" data-trigger="hover" data-content="Click hear to stop" style="display:none"><img id="play" src="~/Content/Stop-icon.png"></button>
    </div>
    <div class="form-inline col-sm-3">
        <button id="recordButton" class="btn" title="Recording" data-toggle="popover" data-trigger="hover" data-content="Click hear to begin recording" onclick="mousePressed1()"><img id="play" src="~/Content/Button-Fast-Forward-icon.png"></button>
        <button id="recordingStopButton" class="btn" title="Stop Recording" data-toggle="popover" data-trigger="hover" data-content="Click hear to replay recording" onclick="mousePressed2()"><img id="play1" src="~/Content/Stop-icon.png"></button>
        <button id="replayButton" class="btn" title="Stop Recording" data-toggle="popover" data-trigger="hover" data-content="Click hear to stop recording" onclick="mousePressed2()"><img id="play1" src="~/Content/Speak-2-icon.png"></button>
        <button id="downloadButton" class="btn" title="Downloading" data-toggle="popover" data-trigger="hover" data-content="Click hear to downloading" onclick="mousePressed3()"><img id="play" src="~/Content/Network-Download-icon.png"></button>

    </div>
</div>

<div class="well">
    <div class="container">
        @foreach (var text in Model)
        {
            if (String.IsNullOrEmpty(text))
            {
            <br /><br />
            }
            else
            {
                <span class="line">
                @MvcHtmlString.Create("<!--")
                @foreach (var word in Regex.Split(text, "([a-zA-Z]+)"))
                {
                    @MvcHtmlString.Create("-->")<span class="@(Regex.IsMatch(word, "[a-zA-Z]+") ? "word" : word.Contains('.') ? "dot" : null)">@word</span>@MvcHtmlString.Create("<!--")
                }
                @MvcHtmlString.Create("-->")
                </span>
            }
        }
    </div>
</div>
<style>
    span.line:hover {
        text-decoration: underline;
    }
    span.bold {
        font-weight: bold;
    }
    span.underline {
        text-decoration: underline;
    }
    span.word {
        cursor: pointer;
    }
    span.red {
        color: red;
    }
    span.green {
        color: green;
    }
    span.blue {
        color: blue;
    }
</style>

@section Scripts {
<script>
    $(function () {
        $('span.word').click(function () {
            $('span.bold').removeClass('bold').parent('span.line').removeClass('underline');
            $(this).addClass('bold').parent('span.line').addClass('underline');
            setContent($(this).parent('span.line').nextAll('span.line').andSelf());
        });
        setContent($('span.line'));
    });

    spanContent = [];
    textContent = [];

    function setContent(sentences) {
        spanContent = [];
        textContent = [];
        tempContent = [];
        sentences.each(function () {
            var sentence = [];
            $(this).find('span.word').each(function () {
                sentence.push($(this).text().toLowerCase());
            });
            spanContent.push(this);
            textContent.push(sentence);
        })
    }

    // start coding here
    //get speechSynthesis library from google
    var synth = window.speechSynthesis;
    var voiceSelect = document.querySelector('select');
    var mic, recorder, soundFile;
    var state = 0; // mousePress will increment from Record, to Stop, to Play
    var rate = document.querySelector('#rate');
    var listVoice = ["David", "Zira", "Mark", "Chelsea", "Peter", "Sergio"];    //array name for google voices
    var voices = [];
    var isClick = true;                                                         //boolean for handle reading text
    var count = 1;                                                              //count for handle recording
    var isBegin = true;                                                         //set state for begin in reading
    var countEnd= 0;                                                            //count for handle record to auto end
    /*
    Get voices from google
    */
    function populateVoiceList() {
        voices = synth.getVoices();
        var selectedIndex = voiceSelect.selectedIndex < 0 ? 0 : voiceSelect.selectedIndex;
        voiceSelect.innerHTML = '';
        for (i = 0, j = 0; i < voices.length; i++) {
            var isLang = false;
            if (voices[i].lang == "en-US" || voices[i].lang == "en-GB") {
                var option = document.createElement('option');
                $("#voices").val(j);
                if (voices[i].lang == "en-US") {
                    option.innerHTML = listVoice[j] + ' (' + voices[i].lang + ')';
                } else {
                    option.innerHTML = listVoice[j] + ' (' + voices[i].lang + ')';
                }
                j++;
                isLang = true;
            }
            if (voices[i].default) {
                option.innerHTML += '';
            }
            if (isLang == true) {
                option.setAttribute('data-lang', voices[i].lang);
                option.setAttribute('data-name', voices[i].name);
                option.value = j;
                voiceSelect.appendChild(option);
            }
        }
        voiceSelect.selectedIndex = selectedIndex;
    }

    populateVoiceList();
    if (speechSynthesis.onvoiceschanged !== undefined) {
        speechSynthesis.onvoiceschanged = populateVoiceList;
    }

    /*
     Handle function to read Text
     */
    var isSpeaking = false;
    function speak(readingText) {
        utterThis = new SpeechSynthesisUtterance(readingText);
        utterThis.onend = function (event) {
            if (spanContent.length == 0) {   // check the last line
                $("#pauseButton").hide();
                $("#cancelButton").hide();
                $("#resumeButton").hide();
                $("#playButton").show();
                isSpeaking = false;
                $('.line').removeClass('blue');
            }
            if (isSpeaking && spanContent.length > 0) {
                hamdoc();
            }
        }
        utterThis.onstart = function (event) {
            $("#pauseButton").show();
            $("#cancelButton").show();
            $("#resumeButton").hide();
            $("#playButton").hide();
        }
        utterThis.onpause = function (event) {
            $("#pauseButton").hide();
            $("#resumeButton").show();
        }
        utterThis.onresume = function (event) {
            $("#pauseButton").show();
            $("#resumeButton").hide();
        }
        utterThis.onerror = function (event) {
            console.error(event);
        }
        var selectedOption = voiceSelect.selectedOptions[0].getAttribute('data-name');
        for (i = 0; i < voices.length; i++) {
            if (voices[i].name === selectedOption) {
                utterThis.voice = voices[i];
            }
        }
        utterThis.rate = rate.value;
        synth.cancel();
        synth.speak(utterThis);
    }

    rate.onchange = function () {
        //rateValue.textContent = rate.value;  // Change speed value read
    }

    /*
    Handle resume, cancel,play to read
    */
    $("#pauseButton").click(function () { // handle pause button
        $(this).hide();
        synth.pause();
    });

    $("#resumeButton").click(function () { // handle resume button
        $(this).hide();
        synth.resume();
    });
    $("#cancelButton").click(function () { // handle cancel button
        synth.cancel();
        isSpeaking = false;
        $("#pauseButton").hide();
        $("#cancelButton").hide();
        $("#resumeButton").hide();
        $("#playButton").show();
    });
    // handle play button
    $("#playButton").click(function () {
        if (spanContent.length > 0) {
            $(this).hide();
            hamdoc();
        }
    });
    function hamdoc() {
        isSpeaking = true;
        $('.line').removeClass('blue');
        $(spanContent[0]).addClass('blue');
        speak($(spanContent[0]).text());
        spanContent.reverse();
        spanContent.pop();
        spanContent.reverse();
    }

    isOnclick = false; //to set run play
    function setup() { //Setup mic onload
        mic = new p5.AudioIn();
        mic.start();
        recorder = new p5.SoundRecorder();
        recorder.setInput(mic);
        soundFile = new p5.SoundFile();
    }
    function mousePressed1() {
        isOnclick = true;
        state = 0;
        if (state === 0 && mic.enabled) {//set state to hide or show and state
            recorder.record(soundFile);
            $('#recordingStopButton').show();
            $('#replayButton').hide();
            state++;
        }
        if (isOnclick == true) {
            isOnclick = false;
        }
    }
    function mousePressed2() {//Stop record and play again
        if (state === 1) {
            recorder.stop(); // stop recorder, and send the result to soundFile
            state++;
            $('#recordingStopButton').hide();
            $('#replayButton').show();
        } else if (state === 2) {
            soundFile.play(); // play the result
        }
    }
    function mousePressed3() {//Download here
        if (state === 2) {
            saveSound(soundFile, 'mySound.wav'); // save file
            $("#recordButton").attr('data-content', 'Click here to begin recording');
        }
    }


    /*
    Run when load
    */
    $(document).ready(function () {
        $("#replayButton").hide();
        $('#rate').slider({});

    });

    </script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/p5.js/0.7.1/p5.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/p5.js/0.7.1/addons/p5.sound.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-slider/10.0.0/bootstrap-slider.min.js"></script>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-slider/10.0.0/css/bootstrap-slider.min.css" rel="stylesheet" />
}
